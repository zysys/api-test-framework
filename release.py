#!/usr/bin/env python3
"""
Release script for Zysys API Test Framework.
Generates the standalone runner.py file for distribution.
"""

import datetime
import os
import sys
from pathlib import Path

# Add current directory to path to import version module
sys.path.insert(0, str(Path(__file__).parent))
from version import increment_version, get_version_for_header

def create_release():
    """Create the standalone runner.py file for distribution."""
    
    # Increment patch version automatically (for bug fixes and improvements)
    version_data = increment_version("patch")
    version_string = get_version_for_header()
    
    print(f"üì¶ Creating release version: {version_string}")
    print("üìù Using Semantic Versioning (major.minor.patch)")
    print("   - major: Breaking changes")
    print("   - minor: New features")
    print("   - patch: Bug fixes (auto-incremented)")
    
    # Auto-generated header
    header = '''#!/usr/bin/env python3
"""
###############################################################################
#                           AUTO-GENERATED FILE
###############################################################################
#
# This file was automatically generated by combining multiple source files.
# DO NOT EDIT THIS FILE DIRECTLY - changes will be lost on next generation.
#
# Version: {version}
# Generated on: {date}
#
# Source files:
#   - src/core.py (testing engine)
#   - src/cli.py (CLI interface)
#
# LICENSE: MIT License
# 
# Copyright (c) 2025 ZAB Ai, LLC
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# USAGE:
# This is a standalone HTTP endpoint testing framework. Download and run:
#   python3 runner.py init
#   python3 runner.py create "Test Name" /endpoint
#   python3 runner.py run-all
#
###############################################################################

Zysys API Test Framework - Standalone Runner

A powerful, parallel HTTP endpoint testing framework with automatic core detection,
rich CLI interface, and flexible configuration management.

This is a standalone file that combines the core testing engine and CLI interface.
"""

import asyncio
import aiohttp
import json
import logging
import os
import psutil
import re
import shutil
import sys
import yaml
import importlib.util
import base64
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from urllib.parse import urljoin, urlparse
from abc import ABC, abstractmethod

from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.panel import Panel
from rich.text import Text

# Initialize rich console
console = Console()

# Constants
DEFAULT_CONFIG_FILE = "config.yaml"
DEFAULT_CONFIGS_DIR = "test/configs"
EXAMPLE_CONFIG_FILE = "config.example.yaml"
EXAMPLE_CONFIGS_DIR = "examples"

'''.format(version=version_string, date=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    
    # Read src/core.py content
    with open('src/core.py', 'r') as f:
        core_content = f.read()
    
    # Read src/cli.py content
    with open('src/cli.py', 'r') as f:
        cli_content = f.read()
    
    # Read extension system files
    extension_files = [
        'src/extensions/base.py',
        'src/extensions/loader.py', 
        'src/extensions/multiple.py',
        'src/extensions/encoded_values.py'
    ]
    
    extension_content = []
    for ext_file in extension_files:
        if Path(ext_file).exists():
            with open(ext_file, 'r') as f:
                content = f.read()
                # Remove imports and docstrings
                lines = content.split('\n')
                filtered = []
                skip_imports = True
                skip_docstring = True
                
                for line in lines:
                    if line.startswith('"""') and skip_docstring:
                        skip_docstring = False
                        continue
                    elif line.startswith('"""') and not skip_docstring:
                        skip_docstring = True
                        continue
                    elif skip_docstring and line.strip() == '':
                        continue
                    elif skip_docstring and (line.startswith('class ') or line.startswith('def ')):
                        skip_imports = False
                        filtered.append(line)
                    elif not skip_imports:
                        filtered.append(line)
                
                extension_content.append('\n'.join(filtered))
    
    extension_system = '\n\n'.join(extension_content)
    
    # Add auto-registration of core extensions
    extension_system += '''

# Auto-register core extensions
_multiple_extension = MultipleExtension()
_encoded_values_extension = EncodedValuesExtension()

# Register them in the CORE_EXTENSIONS registry
CORE_EXTENSIONS['multiple'] = _multiple_extension
CORE_EXTENSIONS['encoded_values'] = _encoded_values_extension
'''
    
    # Remove imports and docstrings from core.py to avoid duplication
    core_lines = core_content.split('\n')
    core_filtered = []
    skip_imports = True
    skip_docstring = True
    
    for line in core_lines:
        if line.startswith('"""') and skip_docstring:
            skip_docstring = False
            continue
        elif line.startswith('"""') and not skip_docstring:
            skip_docstring = True
            continue
        elif skip_docstring and line.startswith('import ') or line.startswith('from '):
            continue
        elif skip_docstring and line.strip() == '':
            continue
        elif skip_docstring and line.startswith('@dataclass'):
            skip_imports = False
            core_filtered.append(line)
        elif not skip_imports:
            core_filtered.append(line)
    
    core_content = '\n'.join(core_filtered)
    
    # Remove imports and docstrings from cli.py to avoid duplication
    cli_lines = cli_content.split('\n')
    cli_filtered = []
    skip_imports = True
    skip_docstring = True
    
    for line in cli_lines:
        if line.startswith('"""') and skip_docstring:
            skip_docstring = False
            continue
        elif line.startswith('"""') and not skip_docstring:
            skip_docstring = True
            continue
        elif skip_docstring and line.startswith('import ') or line.startswith('from '):
            continue
        elif skip_docstring and line.strip() == '':
            continue
        elif skip_docstring and line.startswith('class ZysysTestCLI'):
            skip_imports = False
            cli_filtered.append(line)
        elif not skip_imports:
            cli_filtered.append(line)
    
    cli_content = '\n'.join(cli_filtered)
    
    # Add the main execution block
    main_block = '''

if __name__ == "__main__":
    main()
'''
    
    # Combine everything
    combined = header + extension_system + '\n\n' + core_content + '\n\n' + cli_content + main_block
    
    # Write the combined file
    with open('runner.py', 'w') as f:
        f.write(combined)
    
    print("‚úÖ Created runner.py for distribution")
    print(f"üìè File size: {len(combined)} characters")
    print(f"üì¶ Ready for release! Version: {version_string}")
    print("‚ö†Ô∏è  Auto-generated header included with copyleft license")

if __name__ == "__main__":
    create_release() 